version: "2.4"

services:

  # A Windows-based nodejs base image
  nodejs:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-nodejs:${VERSION:-latest}
    build:
      context: ./docker/build/nodejs
      args:
        PARENT_IMAGE: ${NODEJS_PARENT_IMAGE}
        NODEJS_VERSION: ${NODEJS_VERSION}
    deploy:
      replicas: 0

  # The solution build image is added here so it can be referenced as a build dependency
  # for the images which use its output. Setting "replicas: 0" means docker compose will not
  # include it in the running environment. See Dockerfile for more details.
  solution:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
    build:
      context: .
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019
        NODEJS_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-nodejs:${VERSION:-latest}
        REACT_APP_IS_PROXY: "true"
    deploy:
      replicas: 0

  jss:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-jss:${VERSION:-latest}
    build:
      context: ./docker/build/jss
      args:
        PARENT_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-nodejs:${VERSION:-latest}
        SOLUTION_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
    environment:
      SITECORE_ENABLE_DEBUG: "true"
      SITECORE_API_HOST: "http://cm"
      SITECORE_API_KEY: ${SITECORE_API_KEY}
      SITE_ONE_APP: site-one
      SITE_ONE_SITE: site-one
      SITE_ONE_HOST: ${SITE_ONE_HOST}
      SITE_TWO_APP: site-two
      SITE_TWO_SITE: site-two
      SITE_TWO_HOST: ${SITE_TWO_HOST}
      # MULTISITE-UPDATE
      # Site "Two B" uses the same app as Site "Two"
      SITE_TWO_B_APP: site-two
      SITE_TWO_B_SITE: site-two-b
      SITE_TWO_B_HOST: ${SITE_TWO_B_HOST}
    depends_on:
      - cm
      - nodejs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jss-secure.entrypoints=websecure"
      - "traefik.http.routers.jss-secure.rule=Host(`${SITE_ONE_HOST}`,`${SITE_TWO_HOST}`,`${SITE_TWO_B_HOST}`)"
      - "traefik.http.routers.jss-secure.tls=true"
    

  # Mount the Traefik configuration and certs.
  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql:
    volumes:
      - type: bind
        source: .\docker\data\sql
        target: c:\data

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql-init:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-mssql-init:${VERSION:-latest}
    build:
      context: ./docker/build/mssql-init
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-mssql-init:${SITECORE_VERSION}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}

  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr:
    volumes:
      - type: bind
        source: .\docker\data\solr
        target: c:\data

  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr-init:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-solr-init:${VERSION:-latest}
    build:
      context: ./docker/build/solr-init
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-solr-init:${SITECORE_VERSION}

  # Use our retagged Identity Server image.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  id:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml

  # Use our custom CM (xm1 Standalone) image with added modules and solution code.
  # Folders are mounted below for code deployment and log output. See Dockerfile for details.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  cm:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-cm:${VERSION:-latest}
    build:
      context: ./docker/build/cm
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-cm:${SITECORE_VERSION}
        SOLUTION_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
        NODEJS_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-nodejs:${VERSION:-latest}
        TOOLS_IMAGE: ${TOOLS_IMAGE}
        MANAGEMENT_SERVICES_IMAGE: ${MANAGEMENT_SERVICES_IMAGE}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}
    depends_on:
      - solution
    volumes:
      - ${LOCAL_DEPLOY_PATH}\platform:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      Sitecore_AppSettings_role:define: Standalone
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      ## Development Environment Optimizations
      SITECORE_DEVELOPMENT_PATCHES: DevEnvOn,CustomErrorsOff,HttpErrorsDetailed,DebugOn,DiagnosticsOff,InitMessagesOff,RobotDetectionOff
      Sitecore_AppSettings_exmEnabled:define: "no" # remove to turn on EXM
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\iis\\Development.ps1"

  cd:
    deploy:
      replicas: 0

  redis:
    deploy:
      replicas: 0